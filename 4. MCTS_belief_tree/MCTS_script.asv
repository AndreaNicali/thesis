clc
clear
close all

addpath(genpath('kernels\'))
addpath(genpath('functions\'))
addpath(genpath('3dModel\'))
addpath(genpath('dynamics\'))
addpath(genpath('Uncertainties\'))
addpath(genpath('Reachability\'))
addpath(genpath('MCTS functions\'))

cspice_furnsh('kernels\naif0012.tls');
cspice_furnsh('kernels\erosephem_1999004_2002181.bsp')
cspice_furnsh('kernels\erosatt_1998329_2001157_v01.bpc');

options = odeset('reltol', 1e-12, 'abstol', [ones(3,1)*1e-8; ones(3,1)*1e-11]);

%% Perform an iteration of reachability

%Epoch
t0 = cspice_str2et('2000-08-01 T01:00:00');
tf = cspice_str2et('2000-08-01 T11:00:00');
tt = t0:100:tf;

%Initial Condition
r0 = [8.5855;   44.6428;   -4.4817];
v0 = [0.0164;   -0.0032;    0.0018];
sigma_pos = 0.01;
sigma_vel = 0.03*10^-3;
P0 = [eye(3)*sigma_pos^2, zeros(3); zeros(3),  eye(3)*sigma_vel^2];

%Data for body frame propagation
T_rotation_eros = 5.27025547*3600; 
omega_body = 2*pi/T_rotation_eros*[0; 0; 1];
mass_eros = 6.687e15;

% Semiaxis (in km) of the asteroid model 
a = 20.591;
b = 5.711;
c = 5.332;
n1 = 30;
n2 = 20;

% Features positioning
centres = [120, 965];
vals = [1, 2];

% Asteroid model generation
[F, V, N, C20, C22, A, score] = Ellipsoid_with_scores(a, b, c, n1, n2, centres, vals);

%Astroid knowledge

face_centroids = (V(F(:,1), :) + V(F(:,2), :) + V(F(:,3), :)) / 3;
known_map = double( ...
    face_centroids(:,1) > 0 & ...
    face_centroids(:,2) > 0 & ...
    face_centroids(:,3) > 0 );

known_map = zeros(size(F, 1), 1);

%Features for navigation
nav_index = [   7,   12,   17,   24,   53,   62,   79,   86,   88,  116,  120, ...
  123,  162,  166,  170,  174,  188,  201,  217,  223,  236,  246, ...
  247,  270,  307,  326,  338,  340,  362,  370,  397,  405,  409, ...
  413,  414,  429,  465,  513,  536,  576,  588,  593,  622,  642, ...
  657,  674,  707,  708,  719,  749,  761,  763,  781,  786,  817, ...
  819,  836,  847,  849,  850,  867,  881,  901,  907,  911,  912, ...
  934,  953,  999, 1004, 1009, 1025, 1040, 1041, 1052, 1066, 1090, ...
 1102]; 
 %1105, 1106, 1127, 1205, 1223, 1226, 1227, 1264, 1266, 1282, ...
 %1338, 1343, 1348, 1358, 1385, 1402, 1410, 1415, 1431, 1447, 1456, ...
 %1466];

%Put data in struct
spacecraft_data = struct();
spacecraft_data.data_guidance.ReachabilityScoreComputation = 1;
spacecraft_data.data_guidance.ReachabilityExplorationScheme = 2;
spacecraft_data.data_guidance.DeltaV_max = 2e-3;
spacecraft_data.data_guidance.Th_max = 7*3600;
spacecraft_data.data_guidance.safety_margin = 2*3600;
spacecraft_data.data_guidance.DeltaT_after_man = 0.3*3600;
spacecraft_data.data_guidance.r_impact = 24;
spacecraft_data.data_guidance.r_escape = 100;
spacecraft_data.data_guidance.fov1 = 8*pi/180;
spacecraft_data.data_guidance.fov2 = 8*pi/180;

spacecraft_data.data_asteroids.Faces = F;
spacecraft_data.data_asteroids.Vertexes = V;
spacecraft_data.data_asteroids.Normals = N;
spacecraft_data.data_asteroids.mass = 6.687e15;
spacecraft_data.data_asteroids.omega = 2*pi/(5.27025547*3600)*[0; 0; 1];
spacecraft_data.data_asteroids.C20 = C20;
spacecraft_data.data_asteroids.C22 = C22;
spacecraft_data.data_asteroids.mapping.known_map = known_map;
spacecraft_data.data_asteroids.mapping.incidence = [0, 85]*pi/180;
spacecraft_data.data_asteroids.mapping.emission = [0, 85]*pi/180;
spacecraft_data.data_asteroids.features.score = score;
spacecraft_data.data_asteroids.features.known_map_features = known_map;
spacecraft_data.data_asteroids.navigation = nav_index;

model_dyn = @(t, x) dynamicsEllipsoid(t, x, mass_eros, omega_body, C20, C22);
truth_dyn = @(t, x) dynamics15(t, x, mass_eros, omega_body);

%% MCTS

profile clear
profile on

spacecraft_data_new = spacecraft_data;
r_start = r0;
v_start = v0;
t_start = t0;
P_start = P0;

all_trees = {};
initial_tree = {};
for i = 1:4
    max_iter = 200;
    tree = MCTS_belief_based_reduced([r_start; v_start], P_start, t_start,  max_iter, spacecraft_data_new, initial_tree);
    [best_path, best_actions, best_final_times] = find_best_path(tree);

    [TT_real, XX_real] = compute_trajectory(tree{1}.state, best_final_times, best_actions, truth_dyn, options);
    [J_of_t, dJdt, new_scores_real, new_known_map_real, mapping_score_t, exploit_score_t, nav_score] = total_score(XX_real, TT_real, P0, spacecraft_data_new);
    
    [P_filtered, filt_time] = navigation_for_MCTS(XX_real, tree{1}.cov, TT_real, spacecraft_data_new);

    spacecraft_data_new.data_asteroids.features.known_map_features = new_known_map_real;w
    spacecraft_data_new.data_asteroids.mapping.known_map = new_known_map_real;
    spacecraft_data_new.data_asteroids.features.score = new_scores_real;
    P_start = reshape(P_filtered(:, :, end), 6, 6);
    t_start = TT_real(end);
    r_start = XX_real(end, 1:3)';
    v_start = XX_real(end, 4:6)';


    all_trees{i} = tree;

end

profile off
profile viewer

%%

XX_tot = [];
TT_tot = [];

start_state = [r0; v0];
P_start = P0;
spacecraft_data_new = spacecraft_data;

scores = {};
known_maps = {};
covs = P0;

map_scores = [];
exploit_scores = [];
nav_scores = [];
count = 1;

full_best_actions = [];
full_best_final_times = [];
full_best_path = [];

for i = 1:length(all_trees)
    
    [best_path, best_actions, best_final_times] = find_best_path(all_trees{i});

    for j = 2:length(best_final_times)
    
        [times_j, traj_j] = compute_trajectory(start_state, best_final_times(j-1:j), best_actions(:, j-1), truth_dyn, options);

        [P_filtered, filt_time] = navigation_for_MCTS(traj_j, P_start, times_j, spacecraft_data_new);
    
        [J_of_t_opt, dJdt_opt, new_scores_opt, new_known_map_opt, mapping_score_t_opt, exploit_score_t_opt, nav_score_opt]  = total_score(traj_j, times_j, P_start, spacecraft_data_new);

        spacecraft_data_new.data_asteroids.features.score = new_scores_opt;
        spacecraft_data_new.data_asteroids.features.known_map_features = new_known_map_opt;
        spacecraft_data_new.data_asteroids.mapping.known_map = new_known_map_opt;
    
  
        start_state = traj_j(end, :)';
        P_start = reshape( P_filtered(:, :, end), 6, 6);
        t_start = times_j(end);
    
        scores{count} = new_scores_opt;
        known_maps{count} = new_known_map_opt;
        
        covs(:, :, count+1) = P_start; 
    
        map_scores = [map_scores, sum(mapping_score_t_opt)];
        exploit_scores = [exploit_scores, sum(exploit_score_t_opt)];
        nav_scores = [nav_scores, sum(nav_score_opt)];
        

        XX_tot = [XX_tot; traj_j];
        TT_tot = [TT_tot; times_j];
        count = count+1;
    end

    full_best_actions = [full_best_actions, best_actions];
    full_best_final_times = [full_best_final_times, best_final_times];
    full_best_path = [full_best_path, best_path];


end

plotEllipsoidWithKnownRegion(F, V, new_scores_opt, new_known_map_opt)
hold on
plot3(XX_tot(:, 1), XX_tot(:, 2), XX_tot(:, 3), 'b', 'LineWidth', 1.5);


figure(2)
navscore = plot(nav_scores, 'r', 'LineWidth', 1.5);
hold on
explscore = plot(exploit_scores, 'b', 'LineWidth', 1.5);
mapscore = plot(map_scores, 'g', 'LineWidth', 1.5);
grid on
grid minor
tree1 = xline(2, 'k--', 'LineWidth', 1.5);
tree2 = xline(6, 'k--', 'LineWidth', 1.5);
tree3 = xline(10, 'k--', 'LineWidth', 1.5);
tree4 = xline(13, 'k--', 'LineWidth', 1.5);

legend([navscore, explscore, mapscore, tree1, tree2, tree3, tree4], 'Navigation Score', 'Exploiting Score', 'Mapping Score', 'Up to 1st Tree', 'Up to 2nd Tree', 'Up to 3rd Tree', 'Up to 4th Tree')
xlabel('Action Number')
ylabel('Score Value')

figure(3)
tr = [];
for i = 1:size(covs, 3)
    tr(i) = 3*sqrt(trace(covs(1:3, 1:3, i)));
end
semilogy(tr, 'r', 'LineWidth', 1.5)

figure(4)
tr_v = [];
for i = 1:size(covs, 3)
    tr_v(i) = 3*sqrt(trace(covs(4:6, 4:6, i)));
end
semilogy(tr_v, 'r', 'LineWidth', 1.5)

figure(3)
deter = [];
for i = 1:size(covs, 3)
    deter(i) = log10(covs(:, :, i));
end
semilogy(deter, 'r', 'LineWidth', 1.5)

figure(6)
map = [0, zeros(size(known_maps))];
for i = 1:length(known_maps)
    map(i+1) = sum(known_maps{i});
end
plot(map, 'g', 'LineWidth', 1.5)
yline(length(known_map));


figure(7)
total_expl = sum([score.score]);
exp = [0, zeros(size(scores))];
for i = 1:length(scores)
    cur_score = scores{i};
    for j = 1:length([cur_score.score])
        exp(i+1) = exp(i+1) + sum([cur_score(j).completeness])./length([cur_score(j).completeness]) .* [cur_score(j).score] ;
    end
end
plot(exp, 'b', 'LineWidth', 1.5);
yline(total_expl);
    
