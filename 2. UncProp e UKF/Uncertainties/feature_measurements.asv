function [measurements] = feature_measurements(y, t, spacecraft_data, measurements)

fov1 = spacecraft_data.data_guidance.fov1;
fov2 = spacecraft_data.data_guidance.fov2;

F = spacecraft_data.data_asteroids.Faces;
V = spacecraft_data.data_asteroids.Vertexes;
N = spacecraft_data.data_asteroids.Normals;
features = spacecraft_data.data_asteroids.features;

%Initialize variables
r = y(:, 1:3);

r_sun_vec = zeros(size(y,1), 3);
R_body_cam_all = zeros(3, 3, size(y,1));

%Extract rotation matrices before
for i = 1:size(y, 1)
    r_sun = cspice_spkgeo(2000433, t(i), 'ECLIPJ2000', 10);
    r_sun = r_sun(1:3);
    eclip2eros = cspice_pxform('ECLIPJ2000', 'IAU_EROS', t(i));
    r_sun = eclip2eros*(-r_sun);
    r_sun_vec(i, :) = r_sun;
    R_body_cam_all(:, :, i) = body2camera(y(i,1:3), y(i,4:6));
end

iter = 1;

measurements.coaltitude.val = [];
measurements.coaltitude.feature = [];
measurements.coaltitude.time = [];

measurements.azimuth.val = [];
measurements.azimuth.feature = [];
measurements.azimuth.time = [];

measurements.range.val = [];
measurements.range.feature = [];
measurements.range.time = [];

for i = 1:size(y, 1)

    for j = 1:size(F, 1)
        
        %Compute topocentric frame
        centroid = ( V(F(j, 1), :) + V(F(j, 2), :) +  V(F(j, 3), :) )/3;
        Z_topo = N(:, j);
        ref = [0; 0; 1];

        if abs(dot(Z_topo, ref)) > 0.99
            ref = [1; 0; 0]; % Cambia se troppo allineato
        end

        X_topo = cr;
        Y_topo = cross(Z_topo, X_topo);
        R_body2topo = [X_topo'; Y_topo'; Z_topo'];
        
        %If we are on a feature
        if any(features.index == j)
           r_relative = r(i, 1:3) - centroid;

           obs_coaltitude = acos((dot(r_relative, N(:, j)))/( norm(r_relative) * norm(N(:, j)) )) ;
           emission_check = obs_coaltitude < pi/2;
            
           %If the emission angle is inside the limit
            if emission_check
                r_sun = r_sun_vec(i,:);
                sun_incidence = acos((dot(r_sun, N(:, j)))/( norm(r_sun) * norm(N(:, j)) ));
                incidence_check = sun_incidence < pi/2;
                incidence_check = 1;
                
                %If range is inside the limit
                if incidence_check
                    R_body_cam = R_body_cam_all(:,:,i);
                    inside1 = check_FOV(V(F(j, 1), :), r(i, :), fov1, fov2, R_body_cam);
                    
                    %If FOV is ok 
                    if inside1
                        inside2 = check_FOV(V(F(j, 2), :), r(i, :), fov1, fov2, R_body_cam);

                        if inside2
                            inside3 = check_FOV(V(F(j, 3), :), r(i, :), fov1, fov2, R_body_cam);

                            if inside3

                                measurements.coaltitude.val(iter) = obs_coaltitude;
                                measurements.coaltitude.feature(iter) = j;
                                measurements.coaltitude.time(iter) = t(i);

                                r_topo = R_body2topo*r_relative';
                                measurements.azimuth.val(iter) = atan2(r_topo(1), r_topo(2));
                                measurements.azimuth.feature(iter) = j;
                                measurements.azimuth.time(iter) = t(i);

                                range = norm(r_relative);
                                measurements.range.val(iter) = range;
                                measurements.range.feature(iter) = j;
                                measurements.range.time(iter) = t(i);

                                iter = iter+1;

                            end
                        end 
                    end
                end
            end
        end
    end
end

end